#!/usr/bin/env bash
# Base script for argument parsing: https://github.com/mattbryson/bash-arg-parse
# This script git clone and open project in WebStorm or PyCharm
# By default this script converts any git_url to ssh url (git@), to avoid this: use -o flag

# abort on error
set -e

app="" # app for opening in
convert_url=1 # flag for converting git url to ssh

function usage
{
  printf "git clone and open project in WebStorm or PyCharm\n"
  printf "By default this script converts any git_url to ssh url (git@), to avoid this: use -o flag"
  echo "usage: gco -APP_FLAG git_url [folder_name]"
  echo "   ";
  echo "  -w | --webstorm       : Open project in WebStorm";
  echo "  -p | --pycharm        : Open project in PyCharm Professional";
  echo "  -o | --original_url   : Disable git_url converting to ssh url";
  echo "  -h | --help           : Show help";
  exit 1
}

function parse_args
{
  # positional args
  args=()

  # named args
  while [[ "$1" != "" ]]; do
      case "$1" in
          -w | --webstorm )             app="webstorm";             shift 0;;
          -p | --pycharm )              app="pycharm-professional"; shift 0;;
          -o | --original_url )         convert_url=0;              shift 0;;
          -h | --help )                 usage;                      exit;; # quit and show usage
          * )                           args+=("$1")                # if no match, add it to the positional args
      esac
      shift # move to next kv pair
  done

  # restore positional args
  set -- "${args[@]}"

  # set positionals to vars
  positional_1="${args[0]}"
  positional_2="${args[1]}"

  # validate required args
  if [[ -z "${app}" ]]; then
      echo "App missing"
      usage
      exit;
  fi
}

function run
{
  # parse flags and arguments
  parse_args "$@"

  gco
}

function gco
{
  repoUrl="$positional_1"
  repoName="$positional_2"

  # check if we need to convert git url to ssh
  if [[ "$convert_url" = 1 ]]; then
    git_url=""
    url="$repoUrl"
    # check if we have git@ url and rewrite it to git@
    if [[ "${url%@*}" = "git" ]]; then
      git_url="$url"
    elif [[ "${url%://*}" = "https" ]]; then
      url="${url/.git}"
      domain="${url#*https:\/\/}"
      domain="${domain/\/*}"
      project_url="${url#*https:\/\/$domain\/}"
      git_url="git@""$domain"":""$project_url"".git"
      repoUrl="$git_url"
    else
      echo "Unknown git url type (ssh/https)"
      exit 0
    fi
  fi
  printf "Project url: %s\n" "$repoUrl"

  # parse project name
  if [[ "$repoName" = "" ]]; then
    printf "No project name specified. Parsing it from url...\n"
    repoName="${repoUrl##*/}"
    repoName="${repoName/.git/}"
  fi
  printf "Project name: %s\n" "$repoName"

  # git clone project
  git clone "$repoUrl" "$repoName"

  # cd to project
  cd "$repoName" || exit 0

  # open in app
  ${app} . &

  exit 1
}

run "$@";
